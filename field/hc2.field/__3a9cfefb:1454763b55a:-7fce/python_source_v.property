string>main = _self.find[VEs.MAIN][0]

PRINT_RUN = True
PERFORMANCE_RUN = False

if PRINT_RUN:
	_self.find[VEs.CLOJUREBIND][0]()
	# 15 mins (15 * 60 sec) duration. Five segments, 3 mins each.
	# (Even in 30FPS "print" mode, we get times passed through to us in msec.)
	MINS = 15
	SEG = MINS * 60 * 1000 / 4
	main.state_ = _clojure.cue_box(_clojure.init(), _clojure.e_knees(),        0, SEG)
	main.state_ = _clojure.cue_box(main.state_,     _clojure.euro(),     1 * SEG, SEG)
	main.state_ = _clojure.cue_box(main.state_,     _clojure.switcher(), 2 * SEG, SEG)
	main.state_ = _clojure.cue_box(main.state_,     _clojure.original(), 3 * SEG, SEG)
	main.state_ = _clojure.cue_box(main.state_,     _clojure.e_knees(),  4 * SEG, SEG)

if PERFORMANCE_RUN:
	_self.find[VEs.CLOJURERELOAD][0]()
	# Enough time for Nick to get to the iPad for the music:
	cuePoint = 10 * 1000
	def cueBox(box):
		interval = 180 * 1000
		global cuePoint
		main.state_ = _clojure.cue_box(main.state_, box(), cuePoint, interval)
		cuePoint += interval

	main.state_ = _clojure.init()
	for _ in range(2): cueBox(_clojure.euro)
	for _ in range(3): cueBox(_clojure.e_knees)
	for _ in range(1): cueBox(_clojure.switcher)
	for _ in range(1): cueBox(_clojure.original)
