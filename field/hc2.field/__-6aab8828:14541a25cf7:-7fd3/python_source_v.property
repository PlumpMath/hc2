string>LAYOUT = Manifest(INDENT_BRACKET = 100,
				  INDENT_PAYLOAD = 130,
				  INDENT_TAG = 0,
				  OUTDENT = 80,
				  THICKNESS = 20,
				  TAG_DOWNSHIFT = 50)

def renderLeaf(text, presence, x, y, rgb=[1, 1, 1], size=100):
	"""Render a single line of text. Slightly tricky
	   because we are rendering downwards (hence the vector shift).
	"""
	c = Color4(rgb[0], rgb[1], rgb[2], 0.8 * presence)
	line = FLine(color=c, filled=True) \
		.appendVectorText2(text, x, y, font="Optima", size=size)
	canvas.lines().add(FLine(color=Color4(0, 0, 1, 0.5), filled=1).circle(6, x, y))

	b = line.bounds2()
	line += Vector2(0, b.h)
	return [line, line.bounds2()]

def renderSlug(slug, presence, x0, y0):
	"""Takes a Manifest(clojure object). Returns [lines, bounds].
	   We render so that (x, y) is the top left of the bracket.
	"""
	if hasattr(slug, "presence"):
		p = presence * slug.presence
	else:
		p = presence

	y = y0
	if hasattr(slug, "leaf"):
		l, b = renderLeaf(slug.leaf, p, x, y)
		return [l], b
	else:
		lines = []
		# Marker of origin (debugging):
		canvas.lines().add(FLine(color=Color4(0, 1, 0, 0.5), filled=1).circle(6, x0, y0))

		if hasattr(slug, "tag"):
			tag = slug.tag
		else:
			tag = None

		if hasattr(slug, "tcolour"):
			tcolour = slug.tcolour
		else:
			tcolour = [0.3, 0.3, 0.3]

		children = slug.children
		if len(children) == 0: children = ["---"]
		
		lo_x =  99999
		lo_y =  99999
		hi_x = -99999
		hi_y = -99999

		for c in children:
			clines, cbounds = renderSlug(c, p, x0 + LAYOUT.INDENT_PAYLOAD, y)
			lines.extend(clines)
			# Y grows downwards, so:
			lo_x = min(lo_x, cbounds.x)
			lo_y = min(lo_y, cbounds.y)
			hi_x = max(hi_x, cbounds.x + cbounds.w)
			hi_y = max(hi_y, cbounds.y + cbounds.h)
			y += cbounds.h

		# Bracket:
		bracket = FLine(filled=1, color=Color4(1, 0, 0, p * 0.8))
		bracket.rect(x0 + LAYOUT.INDENT_BRACKET,
					 lo_y,
					 LAYOUT.THICKNESS,
					 hi_y - lo_y)
		lines.append(bracket)

		# Tag, if we have one:
		if tag is not None:
			l, b = renderLeaf(tag,
							  p,
							  x0 + LAYOUT.INDENT_TAG,
							  y0 + LAYOUT.TAG_DOWNSHIFT,
							  size=150,
							  rgb=tcolour)

			#l += CFrame(r=Math.PI / 2, center=[int(b.x + b.w / 2), int(b.y + b.h / 2)])
			#b = l.bounds2()

			lo_x = min(lo_x, b.x)
			lo_y = min(lo_y, b.y)
			lines.append(l)

		# Fiducial outline:
		fid = FLine(filled=0, color=Color4(1, 1, 1, p * 0.5))

		fid.rect(lo_x, lo_y, hi_x - lo_x, hi_y - lo_y)
		lines.append(fid)

		return [lines, Rect(x=lo_x, y=lo_y, w=hi_x - lo_x, h=hi_y - lo_y)]
