string>LAYOUT = Manifest(BRACKET_PITCH = 40,
				  TAG_PITCH = 100,
				  OUTDENT = 80,
				  THICKNESS = 20,
				  TAG_DOWNSHIFT = 50,
				  PLANT_DEBUG=False)

def renderLeaf(text, presence, x, y, rgb=[1, 1, 1], size=100, invert=False):
	"""Render a single line of text. Slightly tricky
	   because we are rendering downwards (hence the vector shift).
	"""
	c = Color4(rgb[0], rgb[1], rgb[2], 0.8 * presence)
	line = FLine(color=c, filled=True) \
		.appendVectorText2(text, x, y, font="Futura", size=size)

	if LAYOUT.PLANT_DEBUG:
		canvas.lines().add(FLine(color=Color4(0, 0, 1, 0.5), filled=1).circle(6, x, y))

	b = line.bounds2()
	# Shift so we're submerged just below y. Be wary of descenders!
	line += Vector2(0, b.h)

	b = line.bounds2()

	if invert:
		line.rect(b.x, b.y, b.w, b.h)

	return [line, b]

def renderSlug(slug, presence, x0, y0):
	"""Takes a Manifest(clojure object). Returns [lines, bounds]."""
	if hasattr(slug, "presence"):
		p = presence * slug.presence
	else:
		p = presence

	y = y0
	if hasattr(slug, "leaf"):
		l, b = renderLeaf(slug.leaf, p, x0, y0)
		return [l], b
	else:
		lines = []
		# Marker of origin (debugging):
		if LAYOUT.PLANT_DEBUG:
			canvas.lines().add(FLine(color=Color4(0, 1, 0, 0.5), filled=1).circle(6, x0, y0))

		if hasattr(slug, "vtag") and slug.vtag is not None:
			tag = Manifest(text=slug.vtag, size=80, rot=True)
		elif hasattr(slug, "htag") and slug.htag is not None:
			tag = Manifest(text=slug.htag, size=150, rot=False)
		else:
			tag = None

		if tag is not None:
			if hasattr(slug, "tcolour"):
				tag.colour = slug.tcolour
			else:
				tag.colour = [0.3, 0.3, 0.3]

		if hasattr(slug, "progress"):
			progress = slug.progress
		else:
			progress = 1.0

		children = slug.children
		if len(children) == 0: children = ["---"]
		
		lo_x =  99999
		lo_y =  99999
		hi_x = -99999
		hi_y = -99999

		if tag is None:
			indentBracket = 0
			indentPayload = LAYOUT.BRACKET_PITCH
		else:
			indentBracket = LAYOUT.TAG_PITCH
			indentPayload = LAYOUT.TAG_PITCH + LAYOUT.BRACKET_PITCH

		for c in children:
			clines, cbounds = renderSlug(c, p, x0 + indentPayload, y)
			lines.extend(clines)
			# Y grows downwards, so:
			lo_x = min(lo_x, cbounds.x)
			lo_y = min(lo_y, cbounds.y)
			hi_x = max(hi_x, cbounds.x + cbounds.w)
			hi_y = max(hi_y, cbounds.y + cbounds.h)
			y += cbounds.h

		# Bracket:
		if progress > 0.999:
			c = Color4(0.4, 0.4, 0.4, p * 0.8)
		else:
			c = Color4(1, 0.2, 0.2, p * 0.8)
		bracket = FLine(filled=1, color=c)
		bracket.rect(x0 + indentBracket,
					 lo_y,
					 LAYOUT.THICKNESS,
					 (hi_y - lo_y) * progress)
		lines.append(bracket)
		bracket = FLine(filled=1, color=Color4(0.7, 0.7, 0.7, p * 0.8))
		bracket.rect(x0 + indentBracket,
					 lo_y + (hi_y - lo_y) * progress,
					 LAYOUT.THICKNESS,
					 (hi_y - lo_y) * (1.0 - progress))
		lines.append(bracket)
		lo_x = min(lo_x, x0 + indentBracket)

		# Tag, if we have one:
		if tag is not None:
			l, b = renderLeaf(tag.text,
							  p,
							  x0,
							  y0 + LAYOUT.TAG_DOWNSHIFT,
							  size=tag.size,
							  rgb=tag.colour,
							  invert=True)

			if tag.rot:
				rotOffset = b.h / 2
				l += CFrame(r=Math.PI / 2, center=Vector2(b.x + rotOffset, b.y + rotOffset))
				b = l.bounds2()

			lo_x = min(lo_x, b.x)
			lo_y = min(lo_y, b.y)
			lines.append(l)

		# Fiducial outline:
		fid = FLine(filled=0, color=Color4(1, 1, 1, p * 0.2))

		fid.rect(lo_x, lo_y, hi_x - lo_x, hi_y - lo_y)
		lines.append(fid)

		return [lines, Rect(x=lo_x, y=lo_y, w=hi_x - lo_x, h=hi_y - lo_y)]
