string>Rendering = Manifest(PRINT=False,
					 OUT="/Users/nick/Desktop/Sicchio",
					 # See NARRATIVE for running time:
					 FRAMES=15*60*30,		# 15 minutes
				     FRAME_INTERVAL=1000/30,
					 LOOP=False)

def sample(pos):
	"pos is wrt. animation frames; not too relevant here."
	if Rendering.PRINT:
		_self.frameCounter_ += 1
		t = _self.frameCounter_ * Rendering.FRAME_INTERVAL
		print "POS=%f, FRAME %d/%d, SECS = %f" \
				% (pos,
				   _self.frameCounter_,
				   Rendering.FRAMES,
				   t / 1000.0)
	else:
		t = System.currentTimeMillis()

	data, newState = _clojure.step(_self.state_, t)
	_self.state_ = newState

	canvas.lines().clear()

	if data is not None:
		for d in data:
			d = Manifest(d)

			if hasattr(d, 'rotation'):
				rot = d.rotation
			else:
				rot = 0.0

			rr = renderSlug(d, 1.0, 0, 0)
			for r in rr[0]:
				# Centre the tree:
				r += Vector2(-rr[1].w / 2, -rr[1].h / 2)
				r += CFrame(r=Math.PI * 2 * rot)
				canvas.lines().add(r)

def start():
	_self.find[VEs.ANNOTATION][0]()
	_self.find[VEs.CLOJURERELOAD][0]()
	_self.find[VEs.CAMERA][0]()

	_self.state_ = _clojure.init()

	if Rendering.PRINT:
		_self.printer_ = JPEGPrinter(canvas, Rendering.OUT)
		_self.printer_.start()
		_self.frameCounter_ = 0
		# Run a system:
		_self.find[VEs.NARRATIVE][0]()

	label_NW(_self, "RUNNING")

def doit():
	while True:
		for i in range(Rendering.FRAMES):
			#print i
			sample(i / float(Rendering.FRAMES))
			yield True

		if not Rendering.LOOP: break

	_self.end()

def done():
	if _self.printer_: _self.printer_.stop()
	label_NW(_self)
	canvas.lines().clear()
	_self.state_ = _clojure.init()

_r = (start, doit(), done)
