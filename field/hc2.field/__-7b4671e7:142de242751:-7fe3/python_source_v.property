string>def sample(pos):
	"pos is wrt. animation frames; not too relevant here."
	data, newState = _clojure.step(_self.state_, System.currentTimeMillis())
	_self.state_ = newState

	canvas.lines().clear()

	if data is not None:
		for d in data:
			d = Manifest(d)

			if hasattr(d, 'rotation'):
				rot = d.rotation
			else:
				rot = 0.0

			rr = renderSlug(d, 1.0, 0, 0)
			for r in rr[0]:
				#r += Vector2(-rr[1].w / 2, -rr[1].h / 2)
				#r += CFrame(r=Math.PI * 2 * rot)
				canvas.lines().add(r)

PRINT = False

def start():
	_self.find[VEs.ANNOTATION][0]()
	_self.find[VEs.CLOJUREINTEROP][0]()
	_self.find[VEs.CAMERA][0]()

	_self.state_ = _clojure.init()

	if PRINT:
		_self.printer_ = JPEGPrinter(canvas, "/Users/nick/Desktop/Sicchio")
		_self.printer_.start()

	label_NW(_self, "RUNNING")

FRAMES = 500
LOOP = True

def doit():
	while True:
		for i in range(FRAMES):
			#print i
			sample(i / float(FRAMES))
			yield True

		if not LOOP: break

	_self.end()

def done():
	if _self.printer_: _self.printer_.stop()
	label_NW(_self)
	canvas.lines().clear()

_r = (start, doit(), done)
