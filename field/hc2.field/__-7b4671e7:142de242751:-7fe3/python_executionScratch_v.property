string>_self.find[VEs.CLOJUREBIND][0]()
_self.state_ = _clojure.cue_box(_clojure.init(), _clojure.uberbox(), 0, 20000)

###

cuePoint = 10 * 1000
def cueBox(box):
	interval = 180 * 1000
	global cuePoint
	_self.state_ = _clojure.cue_box(_self.state_, box(), cuePoint, interval)
	cuePoint += interval

_self.state_ = _clojure.init()
for _ in range(2): cueBox(_clojure.euro)
for _ in range(3): cueBox(_clojure.e_knees)
for _ in range(1): cueBox(_clojure.switcher)
for _ in range(1): cueBox(_clojure.original)

###

_self.state_ = _clojure.init()
_self.state_ = _clojure.cue_box(_self.state_, _clojure.euro(), 0, 180000)
_self.state_ = _clojure.cue_box(_self.state_, _clojure.e_knees(), 0, 10 * 1000)
_self.state_ = _clojure.cue_box(_clojure.init(), _clojure.switcher(), 0, 180000)
_self.state_ = _clojure.cue_box(_clojure.init(), _clojure.original(), 0, 180000)

_self.state_ = _clojure.cue_box(_self.state_, _clojure.template(), 0, 10000)


###


_self.tintColour = Color4(1.0, 0.5, 0.2, 0.3)

_self.state_ = _clojure.box(_self.state_, _clojure.hc1(), 0, 10000)
_self.state_ = _clojure.box(_self.state_, _clojure.hc2(), 0, 180000)
_self.state_ = _clojure.box(_self.state_, _clojure.hc3(), 0, 180000)
_self.state_ = _clojure.box(_self.state_, _clojure.hc4(), 0, 10000)

_self.state_ = _clojure.box(_clojure.init(), _clojure.simple(), 0, 10000)


_self.state_ = _clojure.init()

###

_self.printer_ = JPEGPrinter(canvas, "/Users/nick/Desktop/IJAD")
_self.printer_.start()
_self.printer_.stop()


_self.in_play = True

VEs.CLOJUREBIND