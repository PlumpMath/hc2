string>AUX = 5

def triangle(lines,
			 (x1, y1), (x2, y2), (x3, y3),
			 in_rgba=[0, 0, 0, 0],
			 out_rgba=[0, 0, 0, 0],
			 line_rgba=[0, 0, 0, 0]):
	z = 0
	c = Vector4(*out_rgba)
	c0 = Vector4(*in_rgba)

	v1 = g_TriMesh ** {_vertex: Vector3(x1, y1, z), _color: c0}
	v2 = g_TriMesh ** {_vertex: Vector3(x2, y2, z), _color: c}
	v3 = g_TriMesh ** {_vertex: Vector3(x3, y3, z), _color: c}
	g_TriMesh ** [v1, v2, v3]

	line = FLine(color=Vector4(*line_rgba))
	line.moveTo(x1, y1).lineTo(x2, y2)
	line.moveTo(x1, y1).lineTo(x3, y3).lineTo(x2, y2)
	lines.add(line)

def square(lines,
		   vertices,
		   top_rgba=None,
		   bot_rgba=None,
		   line_rgba=None):
	'''
	Call inside a "with g_TriMesh: ..."
	'''

	(x1, y1, z1), (x2, y2, z2), (x3, y3, z3), (x4, y4, z4) = vertices

	if top_rgba is not None and bot_rgba is not None:
		tc = Vector4(*top_rgba)
		bc = Vector4(*bot_rgba)

		v1 = g_TriMesh ** {_vertex: Vector3(x1, y1, z1), _color: bc}
		v2 = g_TriMesh ** {_vertex: Vector3(x2, y2, z2), _color: bc}
		v3 = g_TriMesh ** {_vertex: Vector3(x3, y3, z3), _color: tc}
		g_TriMesh ** [v1, v2, v3]

		v2 = g_TriMesh ** {_vertex: Vector3(x4, y4, z4), _color: tc}
		g_TriMesh ** [v1, v2, v3]

	if line_rgba is not None:
		line = FLine(color=Vector4(*line_rgba))
		line.moveTo(x1, y1, z1).lineTo(x2, y2, z2).lineTo(x3, y3, z3).lineTo(x4, y4, z4).lineTo(x1, y1, z1)
		lines.add(line)

def textit(lines,
		 (x, y, z),
		 text="---",
		 fill_rgba=(0, 0, 0, 0)):
	if 1:
		line = FLine(color=Vector4(*fill_rgba), filled=1)
		line.moveTo(x, y, 0)
		line.appendVectorText2(text, x, y, "Optima", size=100)
		b = line.bounds()
		line += Vector3(-0.5 * b[1][0], 0, z)
		lines.add(line)

def disc(pos=(0, 0),
		 rgba=(0.0, 0.0, 0.0, 1.0),
		 radius=1.0,
		 fill=0.5):
	'''
	Call inside a "with g_DiscMesh: ..."
	'''
	x, y = pos
	r, g, b, a = rgba
	v = g_DiscMesh.nextVertex(x, y, 0)
	g_DiscMesh.setAux(v, _color, r, g, b, a)
	g_DiscMesh.setAux(v, AUX, radius, fill)
